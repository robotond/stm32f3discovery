
stm32f3discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b38  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf0  08002cf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cf0  08002cf0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cf0  08002cf0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cf4  08002cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003c4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d0  200003d0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c99b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e2a  00000000  00000000  0002ca1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b18  00000000  00000000  0002e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000087f  00000000  00000000  0002f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cb15  00000000  00000000  0002fbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e24d  00000000  00000000  0004c6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ab0fb  00000000  00000000  0005a941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ddc  00000000  00000000  00105a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00108818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ca8 	.word	0x08002ca8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ca8 	.word	0x08002ca8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb8a 	bl	80008e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f8ae 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9ae 	bl	8000534 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f90c 	bl	80003f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f94a 	bl	8000474 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e0:	f000 f986 	bl	80004f0 <MX_USB_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ea:	4850      	ldr	r0, [pc, #320]	; (800032c <main+0x164>)
 80001ec:	f000 fe64 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80001f0:	2064      	movs	r0, #100	; 0x64
 80001f2:	f000 fbdd 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD6_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	484b      	ldr	r0, [pc, #300]	; (800032c <main+0x164>)
 80001fe:	f000 fe5b 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000202:	2064      	movs	r0, #100	; 0x64
 8000204:	f000 fbd4 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000208:	2201      	movs	r2, #1
 800020a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800020e:	4847      	ldr	r0, [pc, #284]	; (800032c <main+0x164>)
 8000210:	f000 fe52 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000214:	2064      	movs	r0, #100	; 0x64
 8000216:	f000 fbcb 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000220:	4842      	ldr	r0, [pc, #264]	; (800032c <main+0x164>)
 8000222:	f000 fe49 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000226:	2064      	movs	r0, #100	; 0x64
 8000228:	f000 fbc2 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000232:	483e      	ldr	r0, [pc, #248]	; (800032c <main+0x164>)
 8000234:	f000 fe40 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000238:	2064      	movs	r0, #100	; 0x64
 800023a:	f000 fbb9 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000244:	4839      	ldr	r0, [pc, #228]	; (800032c <main+0x164>)
 8000246:	f000 fe37 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800024a:	2064      	movs	r0, #100	; 0x64
 800024c:	f000 fbb0 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD9_GPIO_Port, LD9_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000256:	4835      	ldr	r0, [pc, #212]	; (800032c <main+0x164>)
 8000258:	f000 fe2e 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800025c:	2064      	movs	r0, #100	; 0x64
 800025e:	f000 fba7 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
 8000262:	2201      	movs	r2, #1
 8000264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000268:	4830      	ldr	r0, [pc, #192]	; (800032c <main+0x164>)
 800026a:	f000 fe25 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800026e:	2064      	movs	r0, #100	; 0x64
 8000270:	f000 fb9e 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027a:	482c      	ldr	r0, [pc, #176]	; (800032c <main+0x164>)
 800027c:	f000 fe1c 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000280:	2064      	movs	r0, #100	; 0x64
 8000282:	f000 fb95 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800028c:	4827      	ldr	r0, [pc, #156]	; (800032c <main+0x164>)
 800028e:	f000 fe13 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000292:	2064      	movs	r0, #100	; 0x64
 8000294:	f000 fb8c 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD6_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029e:	4823      	ldr	r0, [pc, #140]	; (800032c <main+0x164>)
 80002a0:	f000 fe0a 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80002a4:	2064      	movs	r0, #100	; 0x64
 80002a6:	f000 fb83 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002b0:	481e      	ldr	r0, [pc, #120]	; (800032c <main+0x164>)
 80002b2:	f000 fe01 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80002b6:	2064      	movs	r0, #100	; 0x64
 80002b8:	f000 fb7a 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c2:	481a      	ldr	r0, [pc, #104]	; (800032c <main+0x164>)
 80002c4:	f000 fdf8 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80002c8:	2064      	movs	r0, #100	; 0x64
 80002ca:	f000 fb71 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d4:	4815      	ldr	r0, [pc, #84]	; (800032c <main+0x164>)
 80002d6:	f000 fdef 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80002da:	2064      	movs	r0, #100	; 0x64
 80002dc:	f000 fb68 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e6:	4811      	ldr	r0, [pc, #68]	; (800032c <main+0x164>)
 80002e8:	f000 fde6 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80002ec:	2064      	movs	r0, #100	; 0x64
 80002ee:	f000 fb5f 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD9_GPIO_Port, LD9_Pin, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <main+0x164>)
 80002fa:	f000 fddd 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80002fe:	2064      	movs	r0, #100	; 0x64
 8000300:	f000 fb56 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030a:	4808      	ldr	r0, [pc, #32]	; (800032c <main+0x164>)
 800030c:	f000 fdd4 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000310:	2064      	movs	r0, #100	; 0x64
 8000312:	f000 fb4d 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031c:	4803      	ldr	r0, [pc, #12]	; (800032c <main+0x164>)
 800031e:	f000 fdcb 	bl	8000eb8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000322:	2064      	movs	r0, #100	; 0x64
 8000324:	f000 fb44 	bl	80009b0 <HAL_Delay>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000328:	e75c      	b.n	80001e4 <main+0x1c>
 800032a:	bf00      	nop
 800032c:	48001000 	.word	0x48001000

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b09e      	sub	sp, #120	; 0x78
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f002 fc85 	bl	8002c4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000354:	463b      	mov	r3, r7
 8000356:	223c      	movs	r2, #60	; 0x3c
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f002 fc77 	bl	8002c4e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000360:	2303      	movs	r3, #3
 8000362:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000364:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000368:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036e:	2301      	movs	r3, #1
 8000370:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000372:	2310      	movs	r3, #16
 8000374:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000376:	2302      	movs	r3, #2
 8000378:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000380:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000384:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800038a:	4618      	mov	r0, r3
 800038c:	f000 ffa4 	bl	80012d8 <HAL_RCC_OscConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000396:	f000 f94b 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	230f      	movs	r3, #15
 800039c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039e:	2302      	movs	r3, #2
 80003a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b4:	2101      	movs	r1, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 ffcc 	bl	8002354 <HAL_RCC_ClockConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003c2:	f000 f935 	bl	8000630 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <SystemClock_Config+0xc0>)
 80003c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d4:	463b      	mov	r3, r7
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 f9a2 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003e2:	f000 f925 	bl	8000630 <Error_Handler>
  }
}
 80003e6:	bf00      	nop
 80003e8:	3778      	adds	r7, #120	; 0x78
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	00020020 	.word	0x00020020

080003f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_I2C1_Init+0x74>)
 80003fa:	4a1c      	ldr	r2, [pc, #112]	; (800046c <MX_I2C1_Init+0x78>)
 80003fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MX_I2C1_Init+0x74>)
 8000400:	4a1b      	ldr	r2, [pc, #108]	; (8000470 <MX_I2C1_Init+0x7c>)
 8000402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_I2C1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800040a:	4b17      	ldr	r3, [pc, #92]	; (8000468 <MX_I2C1_Init+0x74>)
 800040c:	2201      	movs	r2, #1
 800040e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000410:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_I2C1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_I2C1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_I2C1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_I2C1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_I2C1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800042e:	480e      	ldr	r0, [pc, #56]	; (8000468 <MX_I2C1_Init+0x74>)
 8000430:	f000 fd5a 	bl	8000ee8 <HAL_I2C_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800043a:	f000 f8f9 	bl	8000630 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800043e:	2100      	movs	r1, #0
 8000440:	4809      	ldr	r0, [pc, #36]	; (8000468 <MX_I2C1_Init+0x74>)
 8000442:	f000 fde0 	bl	8001006 <HAL_I2CEx_ConfigAnalogFilter>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800044c:	f000 f8f0 	bl	8000630 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000450:	2100      	movs	r1, #0
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <MX_I2C1_Init+0x74>)
 8000454:	f000 fe22 	bl	800109c <HAL_I2CEx_ConfigDigitalFilter>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800045e:	f000 f8e7 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000028 	.word	0x20000028
 800046c:	40005400 	.word	0x40005400
 8000470:	2000090e 	.word	0x2000090e

08000474 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_SPI1_Init+0x74>)
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <MX_SPI1_Init+0x78>)
 800047c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <MX_SPI1_Init+0x74>)
 8000480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000484:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_SPI1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <MX_SPI1_Init+0x74>)
 800048e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000492:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <MX_SPI1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <MX_SPI1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004aa:	2208      	movs	r2, #8
 80004ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004c2:	2207      	movs	r2, #7
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004ce:	2208      	movs	r2, #8
 80004d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004d4:	f002 fad4 	bl	8002a80 <HAL_SPI_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004de:	f000 f8a7 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000007c 	.word	0x2000007c
 80004ec:	40013000 	.word	0x40013000

080004f0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <MX_USB_PCD_Init+0x3c>)
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <MX_USB_PCD_Init+0x40>)
 80004f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_USB_PCD_Init+0x3c>)
 80004fc:	2208      	movs	r2, #8
 80004fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <MX_USB_PCD_Init+0x3c>)
 8000502:	2202      	movs	r2, #2
 8000504:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_USB_PCD_Init+0x3c>)
 8000508:	2202      	movs	r2, #2
 800050a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <MX_USB_PCD_Init+0x3c>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_USB_PCD_Init+0x3c>)
 8000514:	2200      	movs	r2, #0
 8000516:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <MX_USB_PCD_Init+0x3c>)
 800051a:	f000 fe0b 	bl	8001134 <HAL_PCD_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000524:	f000 f884 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200000e0 	.word	0x200000e0
 8000530:	40005c00 	.word	0x40005c00

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800054a:	4b37      	ldr	r3, [pc, #220]	; (8000628 <MX_GPIO_Init+0xf4>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a36      	ldr	r2, [pc, #216]	; (8000628 <MX_GPIO_Init+0xf4>)
 8000550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b34      	ldr	r3, [pc, #208]	; (8000628 <MX_GPIO_Init+0xf4>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <MX_GPIO_Init+0xf4>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a30      	ldr	r2, [pc, #192]	; (8000628 <MX_GPIO_Init+0xf4>)
 8000568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <MX_GPIO_Init+0xf4>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <MX_GPIO_Init+0xf4>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a2a      	ldr	r2, [pc, #168]	; (8000628 <MX_GPIO_Init+0xf4>)
 8000580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b28      	ldr	r3, [pc, #160]	; (8000628 <MX_GPIO_Init+0xf4>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b25      	ldr	r3, [pc, #148]	; (8000628 <MX_GPIO_Init+0xf4>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a24      	ldr	r2, [pc, #144]	; (8000628 <MX_GPIO_Init+0xf4>)
 8000598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <MX_GPIO_Init+0xf4>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <MX_GPIO_Init+0xf4>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a1e      	ldr	r2, [pc, #120]	; (8000628 <MX_GPIO_Init+0xf4>)
 80005b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <MX_GPIO_Init+0xf4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005c2:	2200      	movs	r2, #0
 80005c4:	f64f 7108 	movw	r1, #65288	; 0xff08
 80005c8:	4818      	ldr	r0, [pc, #96]	; (800062c <MX_GPIO_Init+0xf8>)
 80005ca:	f000 fc75 	bl	8000eb8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80005ce:	2337      	movs	r3, #55	; 0x37
 80005d0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005d2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4619      	mov	r1, r3
 80005e2:	4812      	ldr	r0, [pc, #72]	; (800062c <MX_GPIO_Init+0xf8>)
 80005e4:	f000 faee 	bl	8000bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005e8:	f64f 7308 	movw	r3, #65288	; 0xff08
 80005ec:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	480a      	ldr	r0, [pc, #40]	; (800062c <MX_GPIO_Init+0xf8>)
 8000602:	f000 fadf 	bl	8000bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f000 fad2 	bl	8000bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	; 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000
 800062c:	48001000 	.word	0x48001000

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000638:	e7fe      	b.n	8000638 <Error_Handler+0x8>
	...

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_MspInit+0x44>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <HAL_MspInit+0x44>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6193      	str	r3, [r2, #24]
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_MspInit+0x44>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_MspInit+0x44>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <HAL_MspInit+0x44>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_MspInit+0x44>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000672:	2007      	movs	r0, #7
 8000674:	f000 fa72 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <HAL_I2C_MspInit+0x7c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d127      	bne.n	80006f6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <HAL_I2C_MspInit+0x80>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a16      	ldr	r2, [pc, #88]	; (8000704 <HAL_I2C_MspInit+0x80>)
 80006ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <HAL_I2C_MspInit+0x80>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80006be:	23c0      	movs	r3, #192	; 0xc0
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c2:	2312      	movs	r3, #18
 80006c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ce:	2304      	movs	r3, #4
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <HAL_I2C_MspInit+0x84>)
 80006da:	f000 fa73 	bl	8000bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_I2C_MspInit+0x80>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <HAL_I2C_MspInit+0x80>)
 80006e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_I2C_MspInit+0x80>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40005400 	.word	0x40005400
 8000704:	40021000 	.word	0x40021000
 8000708:	48000400 	.word	0x48000400

0800070c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a17      	ldr	r2, [pc, #92]	; (8000788 <HAL_SPI_MspInit+0x7c>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d128      	bne.n	8000780 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <HAL_SPI_MspInit+0x80>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <HAL_SPI_MspInit+0x80>)
 8000734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_SPI_MspInit+0x80>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_SPI_MspInit+0x80>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a10      	ldr	r2, [pc, #64]	; (800078c <HAL_SPI_MspInit+0x80>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HAL_SPI_MspInit+0x80>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800075e:	23e0      	movs	r3, #224	; 0xe0
 8000760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800076e:	2305      	movs	r3, #5
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f000 fa22 	bl	8000bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40013000 	.word	0x40013000
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a18      	ldr	r2, [pc, #96]	; (8000810 <HAL_PCD_MspInit+0x80>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d129      	bne.n	8000806 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_PCD_MspInit+0x84>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <HAL_PCD_MspInit+0x84>)
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_PCD_MspInit+0x84>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80007ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80007dc:	230e      	movs	r3, #14
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f000 f9eb 	bl	8000bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_PCD_MspInit+0x84>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_PCD_MspInit+0x84>)
 80007f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_PCD_MspInit+0x84>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40005c00 	.word	0x40005c00
 8000814:	40021000 	.word	0x40021000

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f884 	bl	8000970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <SystemInit+0x20>)
 8000872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000876:	4a05      	ldr	r2, [pc, #20]	; (800088c <SystemInit+0x20>)
 8000878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800087c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000894:	f7ff ffea 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <LoopForever+0x6>)
  ldr r1, =_edata
 800089a:	490d      	ldr	r1, [pc, #52]	; (80008d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <LoopForever+0xe>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b0:	4c0a      	ldr	r4, [pc, #40]	; (80008dc <LoopForever+0x16>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008be:	f002 f9cf 	bl	8002c60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c2:	f7ff fc81 	bl	80001c8 <main>

080008c6 <LoopForever>:

LoopForever:
    b LoopForever
 80008c6:	e7fe      	b.n	80008c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008c8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d4:	08002cf8 	.word	0x08002cf8
  ldr r2, =_sbss
 80008d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008dc:	200003d0 	.word	0x200003d0

080008e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC1_2_IRQHandler>
	...

080008e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_Init+0x28>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_Init+0x28>)
 80008ee:	f043 0310 	orr.w	r3, r3, #16
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f4:	2003      	movs	r0, #3
 80008f6:	f000 f931 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f000 f808 	bl	8000910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000900:	f7ff fe9c 	bl	800063c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40022000 	.word	0x40022000

08000910 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_InitTick+0x54>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_InitTick+0x58>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	fbb3 f3f1 	udiv	r3, r3, r1
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f93b 	bl	8000baa <HAL_SYSTICK_Config>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e00e      	b.n	800095c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d80a      	bhi.n	800095a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000944:	2200      	movs	r2, #0
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800094c:	f000 f911 	bl	8000b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <HAL_InitTick+0x5c>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000000 	.word	0x20000000
 8000968:	20000008 	.word	0x20000008
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x20>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x24>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_IncTick+0x24>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008
 8000994:	200003cc 	.word	0x200003cc

08000998 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;  
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_GetTick+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200003cc 	.word	0x200003cc

080009b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f7ff ffee 	bl	8000998 <HAL_GetTick>
 80009bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009c8:	d005      	beq.n	80009d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_Delay+0x44>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009d6:	bf00      	nop
 80009d8:	f7ff ffde 	bl	8000998 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d8f7      	bhi.n	80009d8 <HAL_Delay+0x28>
  {
  }
}
 80009e8:	bf00      	nop
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	; (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b3c:	f7ff ff8e 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff47 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff5c 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff8e 	bl	8000ab0 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffb0 	bl	8000b18 <SysTick_Config>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd2:	e154      	b.n	8000e7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 8146 	beq.w	8000e78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d005      	beq.n	8000c04 <HAL_GPIO_Init+0x40>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d130      	bne.n	8000c66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	091b      	lsrs	r3, r3, #4
 8000c50:	f003 0201 	and.w	r2, r3, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d017      	beq.n	8000ca2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d123      	bne.n	8000cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	08da      	lsrs	r2, r3, #3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	691a      	ldr	r2, [r3, #16]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	08da      	lsrs	r2, r3, #3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3208      	adds	r2, #8
 8000cf0:	6939      	ldr	r1, [r7, #16]
 8000cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0203 	and.w	r2, r3, #3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 80a0 	beq.w	8000e78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d38:	4b58      	ldr	r3, [pc, #352]	; (8000e9c <HAL_GPIO_Init+0x2d8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a57      	ldr	r2, [pc, #348]	; (8000e9c <HAL_GPIO_Init+0x2d8>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <HAL_GPIO_Init+0x2d8>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d50:	4a53      	ldr	r2, [pc, #332]	; (8000ea0 <HAL_GPIO_Init+0x2dc>)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3302      	adds	r3, #2
 8000d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d7a:	d019      	beq.n	8000db0 <HAL_GPIO_Init+0x1ec>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <HAL_GPIO_Init+0x2e0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d013      	beq.n	8000dac <HAL_GPIO_Init+0x1e8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <HAL_GPIO_Init+0x2e4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d00d      	beq.n	8000da8 <HAL_GPIO_Init+0x1e4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a47      	ldr	r2, [pc, #284]	; (8000eac <HAL_GPIO_Init+0x2e8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d007      	beq.n	8000da4 <HAL_GPIO_Init+0x1e0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a46      	ldr	r2, [pc, #280]	; (8000eb0 <HAL_GPIO_Init+0x2ec>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d101      	bne.n	8000da0 <HAL_GPIO_Init+0x1dc>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	e008      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000da0:	2305      	movs	r3, #5
 8000da2:	e006      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000da4:	2303      	movs	r3, #3
 8000da6:	e004      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e002      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <HAL_GPIO_Init+0x1ee>
 8000db0:	2300      	movs	r3, #0
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	f002 0203 	and.w	r2, r2, #3
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	4093      	lsls	r3, r2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc2:	4937      	ldr	r1, [pc, #220]	; (8000ea0 <HAL_GPIO_Init+0x2dc>)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd0:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000df4:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e1e:	4a25      	ldr	r2, [pc, #148]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e48:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_GPIO_Init+0x2f0>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa22 f303 	lsr.w	r3, r2, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f47f aea3 	bne.w	8000bd4 <HAL_GPIO_Init+0x10>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	48000c00 	.word	0x48000c00
 8000eb0:	48001000 	.word	0x48001000
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e081      	b.n	8000ffe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d106      	bne.n	8000f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fbb8 	bl	8000684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2224      	movs	r2, #36	; 0x24
 8000f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d107      	bne.n	8000f62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	e006      	b.n	8000f70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d104      	bne.n	8000f82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68da      	ldr	r2, [r3, #12]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691a      	ldr	r2, [r3, #16]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69d9      	ldr	r1, [r3, #28]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a1a      	ldr	r2, [r3, #32]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0201 	orr.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2220      	movs	r2, #32
 8000fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b20      	cmp	r3, #32
 800101a:	d138      	bne.n	800108e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001022:	2b01      	cmp	r3, #1
 8001024:	d101      	bne.n	800102a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001026:	2302      	movs	r3, #2
 8001028:	e032      	b.n	8001090 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2224      	movs	r2, #36	; 0x24
 8001036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0201 	bic.w	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001058:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6819      	ldr	r1, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	430a      	orrs	r2, r1
 8001068:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0201 	orr.w	r2, r2, #1
 8001078:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2220      	movs	r2, #32
 800107e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800108e:	2302      	movs	r3, #2
  }
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b20      	cmp	r3, #32
 80010b0:	d139      	bne.n	8001126 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d101      	bne.n	80010c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010bc:	2302      	movs	r3, #2
 80010be:	e033      	b.n	8001128 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2224      	movs	r2, #36	; 0x24
 80010cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0201 	orr.w	r2, r2, #1
 8001110:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2220      	movs	r2, #32
 8001116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001126:	2302      	movs	r3, #2
  }
}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001136:	b08b      	sub	sp, #44	; 0x2c
 8001138:	af06      	add	r7, sp, #24
 800113a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e0c4      	b.n	80012d0 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fb18 	bl	8000790 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2203      	movs	r2, #3
 8001164:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fd32 	bl	8002bd6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e040      	b.n	80011fa <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	3301      	adds	r3, #1
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	440b      	add	r3, r1
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	3303      	adds	r3, #3
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	440b      	add	r3, r1
 80011c6:	3338      	adds	r3, #56	; 0x38
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	440b      	add	r3, r1
 80011da:	333c      	adds	r3, #60	; 0x3c
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	3340      	adds	r3, #64	; 0x40
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	3301      	adds	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	d3b9      	bcc.n	8001178 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e044      	b.n	8001294 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	f203 1369 	addw	r3, r3, #361	; 0x169
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	3301      	adds	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	d3b5      	bcc.n	800120a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	687e      	ldr	r6, [r7, #4]
 80012a6:	466d      	mov	r5, sp
 80012a8:	f106 0410 	add.w	r4, r6, #16
 80012ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	602b      	str	r3, [r5, #0]
 80012b4:	1d33      	adds	r3, r6, #4
 80012b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b8:	6838      	ldr	r0, [r7, #0]
 80012ba:	f001 fca7 	bl	8002c0c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80012de:	af00      	add	r7, sp, #0
 80012e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	f001 b823 	b.w	8002344 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 817d 	beq.w	800160e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001314:	4bbc      	ldr	r3, [pc, #752]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b04      	cmp	r3, #4
 800131e:	d00c      	beq.n	800133a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001320:	4bb9      	ldr	r3, [pc, #740]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	d15c      	bne.n	80013e6 <HAL_RCC_OscConfig+0x10e>
 800132c:	4bb6      	ldr	r3, [pc, #728]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001338:	d155      	bne.n	80013e6 <HAL_RCC_OscConfig+0x10e>
 800133a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800134e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	095b      	lsrs	r3, r3, #5
 800135a:	b2db      	uxtb	r3, r3
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d102      	bne.n	800136c <HAL_RCC_OscConfig+0x94>
 8001366:	4ba8      	ldr	r3, [pc, #672]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	e015      	b.n	8001398 <HAL_RCC_OscConfig+0xc0>
 800136c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001370:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001374:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001378:	fa93 f3a3 	rbit	r3, r3
 800137c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001384:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001388:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001394:	4b9c      	ldr	r3, [pc, #624]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800139c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013a4:	fa92 f2a2 	rbit	r2, r2
 80013a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80013ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80013b0:	fab2 f282 	clz	r2, r2
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	f042 0220 	orr.w	r2, r2, #32
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	f002 021f 	and.w	r2, r2, #31
 80013c0:	2101      	movs	r1, #1
 80013c2:	fa01 f202 	lsl.w	r2, r1, r2
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 811f 	beq.w	800160c <HAL_RCC_OscConfig+0x334>
 80013ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f040 8116 	bne.w	800160c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f000 bfaf 	b.w	8002344 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f6:	d106      	bne.n	8001406 <HAL_RCC_OscConfig+0x12e>
 80013f8:	4b83      	ldr	r3, [pc, #524]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a82      	ldr	r2, [pc, #520]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 80013fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e036      	b.n	8001474 <HAL_RCC_OscConfig+0x19c>
 8001406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x158>
 8001416:	4b7c      	ldr	r3, [pc, #496]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a7b      	ldr	r2, [pc, #492]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 800141c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b79      	ldr	r3, [pc, #484]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a78      	ldr	r2, [pc, #480]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e021      	b.n	8001474 <HAL_RCC_OscConfig+0x19c>
 8001430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001434:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x184>
 8001442:	4b71      	ldr	r3, [pc, #452]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a70      	ldr	r2, [pc, #448]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b6e      	ldr	r3, [pc, #440]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6d      	ldr	r2, [pc, #436]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0x19c>
 800145c:	4b6a      	ldr	r3, [pc, #424]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a69      	ldr	r2, [pc, #420]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b67      	ldr	r3, [pc, #412]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a66      	ldr	r2, [pc, #408]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001472:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001474:	4b64      	ldr	r3, [pc, #400]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	f023 020f 	bic.w	r2, r3, #15
 800147c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001480:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	495f      	ldr	r1, [pc, #380]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 800148a:	4313      	orrs	r3, r2
 800148c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d059      	beq.n	8001552 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fa7b 	bl	8000998 <HAL_GetTick>
 80014a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	e00a      	b.n	80014be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fa76 	bl	8000998 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b64      	cmp	r3, #100	; 0x64
 80014b6:	d902      	bls.n	80014be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	f000 bf43 	b.w	8002344 <HAL_RCC_OscConfig+0x106c>
 80014be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80014ca:	fa93 f3a3 	rbit	r3, r3
 80014ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80014d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	095b      	lsrs	r3, r3, #5
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d102      	bne.n	80014f0 <HAL_RCC_OscConfig+0x218>
 80014ea:	4b47      	ldr	r3, [pc, #284]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	e015      	b.n	800151c <HAL_RCC_OscConfig+0x244>
 80014f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014fc:	fa93 f3a3 	rbit	r3, r3
 8001500:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001508:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800150c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001518:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001520:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001524:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001528:	fa92 f2a2 	rbit	r2, r2
 800152c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001530:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001534:	fab2 f282 	clz	r2, r2
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	f042 0220 	orr.w	r2, r2, #32
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	f002 021f 	and.w	r2, r2, #31
 8001544:	2101      	movs	r1, #1
 8001546:	fa01 f202 	lsl.w	r2, r1, r2
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ab      	beq.n	80014a8 <HAL_RCC_OscConfig+0x1d0>
 8001550:	e05d      	b.n	800160e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fa21 	bl	8000998 <HAL_GetTick>
 8001556:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fa1c 	bl	8000998 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b64      	cmp	r3, #100	; 0x64
 800156a:	d902      	bls.n	8001572 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	f000 bee9 	b.w	8002344 <HAL_RCC_OscConfig+0x106c>
 8001572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001576:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800157e:	fa93 f3a3 	rbit	r3, r3
 8001582:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001586:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	095b      	lsrs	r3, r3, #5
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d102      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2cc>
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	e015      	b.n	80015d0 <HAL_RCC_OscConfig+0x2f8>
 80015a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015b0:	fa93 f3a3 	rbit	r3, r3
 80015b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80015c4:	fa93 f3a3 	rbit	r3, r3
 80015c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_RCC_OscConfig+0x330>)
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015d4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80015d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015dc:	fa92 f2a2 	rbit	r2, r2
 80015e0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80015e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80015e8:	fab2 f282 	clz	r2, r2
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	f042 0220 	orr.w	r2, r2, #32
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	f002 021f 	and.w	r2, r2, #31
 80015f8:	2101      	movs	r1, #1
 80015fa:	fa01 f202 	lsl.w	r2, r1, r2
 80015fe:	4013      	ands	r3, r2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1ab      	bne.n	800155c <HAL_RCC_OscConfig+0x284>
 8001604:	e003      	b.n	800160e <HAL_RCC_OscConfig+0x336>
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 817d 	beq.w	800191e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001624:	4ba6      	ldr	r3, [pc, #664]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001630:	4ba3      	ldr	r3, [pc, #652]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b08      	cmp	r3, #8
 800163a:	d172      	bne.n	8001722 <HAL_RCC_OscConfig+0x44a>
 800163c:	4ba0      	ldr	r3, [pc, #640]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d16c      	bne.n	8001722 <HAL_RCC_OscConfig+0x44a>
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001652:	fa93 f3a3 	rbit	r3, r3
 8001656:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800165a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	095b      	lsrs	r3, r3, #5
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d102      	bne.n	8001678 <HAL_RCC_OscConfig+0x3a0>
 8001672:	4b93      	ldr	r3, [pc, #588]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	e013      	b.n	80016a0 <HAL_RCC_OscConfig+0x3c8>
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001690:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800169c:	4b88      	ldr	r3, [pc, #544]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2202      	movs	r2, #2
 80016a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016aa:	fa92 f2a2 	rbit	r2, r2
 80016ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016b6:	fab2 f282 	clz	r2, r2
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	f042 0220 	orr.w	r2, r2, #32
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	f002 021f 	and.w	r2, r2, #31
 80016c6:	2101      	movs	r1, #1
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00a      	beq.n	80016e8 <HAL_RCC_OscConfig+0x410>
 80016d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d002      	beq.n	80016e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f000 be2e 	b.w	8002344 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	4b75      	ldr	r3, [pc, #468]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	21f8      	movs	r1, #248	; 0xf8
 80016fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001706:	fa91 f1a1 	rbit	r1, r1
 800170a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800170e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001712:	fab1 f181 	clz	r1, r1
 8001716:	b2c9      	uxtb	r1, r1
 8001718:	408b      	lsls	r3, r1
 800171a:	4969      	ldr	r1, [pc, #420]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001720:	e0fd      	b.n	800191e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8088 	beq.w	8001844 <HAL_RCC_OscConfig+0x56c>
 8001734:	2301      	movs	r3, #1
 8001736:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001746:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001754:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	461a      	mov	r2, r3
 800175c:	2301      	movs	r3, #1
 800175e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff f91a 	bl	8000998 <HAL_GetTick>
 8001764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff f915 	bl	8000998 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d902      	bls.n	8001780 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	f000 bde2 	b.w	8002344 <HAL_RCC_OscConfig+0x106c>
 8001780:	2302      	movs	r3, #2
 8001782:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001792:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4d8>
 80017aa:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	e013      	b.n	80017d8 <HAL_RCC_OscConfig+0x500>
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80017d4:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	2202      	movs	r2, #2
 80017da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80017de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017e2:	fa92 f2a2 	rbit	r2, r2
 80017e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80017ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80017ee:	fab2 f282 	clz	r2, r2
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	f042 0220 	orr.w	r2, r2, #32
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	f002 021f 	and.w	r2, r2, #31
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f202 	lsl.w	r2, r1, r2
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0af      	beq.n	800176a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	21f8      	movs	r1, #248	; 0xf8
 8001820:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001828:	fa91 f1a1 	rbit	r1, r1
 800182c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001830:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001834:	fab1 f181 	clz	r1, r1
 8001838:	b2c9      	uxtb	r1, r1
 800183a:	408b      	lsls	r3, r1
 800183c:	4920      	ldr	r1, [pc, #128]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
 8001842:	e06c      	b.n	800191e <HAL_RCC_OscConfig+0x646>
 8001844:	2301      	movs	r3, #1
 8001846:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001856:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	461a      	mov	r2, r3
 800186c:	2300      	movs	r3, #0
 800186e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff f892 	bl	8000998 <HAL_GetTick>
 8001874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff f88d 	bl	8000998 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d902      	bls.n	8001890 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	f000 bd5a 	b.w	8002344 <HAL_RCC_OscConfig+0x106c>
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	095b      	lsrs	r3, r3, #5
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d104      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5ec>
 80018ba:	4b01      	ldr	r3, [pc, #4]	; (80018c0 <HAL_RCC_OscConfig+0x5e8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	e015      	b.n	80018ec <HAL_RCC_OscConfig+0x614>
 80018c0:	40021000 	.word	0x40021000
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80018e8:	4bc8      	ldr	r3, [pc, #800]	; (8001c0c <HAL_RCC_OscConfig+0x934>)
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	2202      	movs	r2, #2
 80018ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80018f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018f6:	fa92 f2a2 	rbit	r2, r2
 80018fa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80018fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	f042 0220 	orr.w	r2, r2, #32
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	f002 021f 	and.w	r2, r2, #31
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ad      	bne.n	800187a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8110 	beq.w	8001b54 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d079      	beq.n	8001a38 <HAL_RCC_OscConfig+0x760>
 8001944:	2301      	movs	r3, #1
 8001946:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	4bab      	ldr	r3, [pc, #684]	; (8001c10 <HAL_RCC_OscConfig+0x938>)
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	461a      	mov	r2, r3
 800196a:	2301      	movs	r3, #1
 800196c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7ff f813 	bl	8000998 <HAL_GetTick>
 8001972:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001976:	e00a      	b.n	800198e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001978:	f7ff f80e 	bl	8000998 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d902      	bls.n	800198e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	f000 bcdb 	b.w	8002344 <HAL_RCC_OscConfig+0x106c>
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019a8:	2202      	movs	r2, #2
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	fa93 f2a3 	rbit	r2, r3
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80019cc:	2202      	movs	r2, #2
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	fa93 f2a3 	rbit	r2, r3
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e8:	4b88      	ldr	r3, [pc, #544]	; (8001c0c <HAL_RCC_OscConfig+0x934>)
 80019ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019f4:	2102      	movs	r1, #2
 80019f6:	6019      	str	r1, [r3, #0]
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f1a3 	rbit	r1, r3
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a0e:	6019      	str	r1, [r3, #0]
  return result;
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0a0      	beq.n	8001978 <HAL_RCC_OscConfig+0x6a0>
 8001a36:	e08d      	b.n	8001b54 <HAL_RCC_OscConfig+0x87c>
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	fa93 f2a3 	rbit	r2, r3
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a5a:	601a      	str	r2, [r3, #0]
  return result;
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x938>)
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	461a      	mov	r2, r3
 8001a76:	2300      	movs	r3, #0
 8001a78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7fe ff8d 	bl	8000998 <HAL_GetTick>
 8001a7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a84:	f7fe ff88 	bl	8000998 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d902      	bls.n	8001a9a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	f000 bc55 	b.w	8002344 <HAL_RCC_OscConfig+0x106c>
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	fa93 f2a3 	rbit	r2, r3
 8001ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001aea:	2202      	movs	r2, #2
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	fa93 f2a3 	rbit	r2, r3
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <HAL_RCC_OscConfig+0x934>)
 8001b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b12:	2102      	movs	r1, #2
 8001b14:	6019      	str	r1, [r3, #0]
 8001b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	fa93 f1a3 	rbit	r1, r3
 8001b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b28:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b2c:	6019      	str	r1, [r3, #0]
  return result;
 8001b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b32:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d197      	bne.n	8001a84 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 81a1 	beq.w	8001eac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_RCC_OscConfig+0x934>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d116      	bne.n	8001baa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_RCC_OscConfig+0x934>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	4a22      	ldr	r2, [pc, #136]	; (8001c0c <HAL_RCC_OscConfig+0x934>)
 8001b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b86:	61d3      	str	r3, [r2, #28]
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_RCC_OscConfig+0x934>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ba2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_RCC_OscConfig+0x93c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d11a      	bne.n	8001bec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_RCC_OscConfig+0x93c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a16      	ldr	r2, [pc, #88]	; (8001c14 <HAL_RCC_OscConfig+0x93c>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7fe fee9 	bl	8000998 <HAL_GetTick>
 8001bc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	e009      	b.n	8001be0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bcc:	f7fe fee4 	bl	8000998 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b64      	cmp	r3, #100	; 0x64
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e3b1      	b.n	8002344 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_RCC_OscConfig+0x93c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ef      	beq.n	8001bcc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d10d      	bne.n	8001c18 <HAL_RCC_OscConfig+0x940>
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_RCC_OscConfig+0x934>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a02      	ldr	r2, [pc, #8]	; (8001c0c <HAL_RCC_OscConfig+0x934>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e03c      	b.n	8001c84 <HAL_RCC_OscConfig+0x9ac>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	10908120 	.word	0x10908120
 8001c14:	40007000 	.word	0x40007000
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10c      	bne.n	8001c42 <HAL_RCC_OscConfig+0x96a>
 8001c28:	4bc1      	ldr	r3, [pc, #772]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4ac0      	ldr	r2, [pc, #768]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6213      	str	r3, [r2, #32]
 8001c34:	4bbe      	ldr	r3, [pc, #760]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4abd      	ldr	r2, [pc, #756]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c3a:	f023 0304 	bic.w	r3, r3, #4
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	e020      	b.n	8001c84 <HAL_RCC_OscConfig+0x9ac>
 8001c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x994>
 8001c52:	4bb7      	ldr	r3, [pc, #732]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4ab6      	ldr	r2, [pc, #728]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6213      	str	r3, [r2, #32]
 8001c5e:	4bb4      	ldr	r3, [pc, #720]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4ab3      	ldr	r2, [pc, #716]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0x9ac>
 8001c6c:	4bb0      	ldr	r3, [pc, #704]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4aaf      	ldr	r2, [pc, #700]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6213      	str	r3, [r2, #32]
 8001c78:	4bad      	ldr	r3, [pc, #692]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4aac      	ldr	r2, [pc, #688]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001c7e:	f023 0304 	bic.w	r3, r3, #4
 8001c82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8081 	beq.w	8001d98 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7fe fe7f 	bl	8000998 <HAL_GetTick>
 8001c9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca0:	f7fe fe7a 	bl	8000998 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e345      	b.n	8002344 <HAL_RCC_OscConfig+0x106c>
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fa93 f2a3 	rbit	r2, r3
 8001cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001cfe:	601a      	str	r2, [r3, #0]
  return result;
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	095b      	lsrs	r3, r3, #5
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d102      	bne.n	8001d24 <HAL_RCC_OscConfig+0xa4c>
 8001d1e:	4b84      	ldr	r3, [pc, #528]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	e013      	b.n	8001d4c <HAL_RCC_OscConfig+0xa74>
 8001d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	4b79      	ldr	r3, [pc, #484]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001d54:	2102      	movs	r1, #2
 8001d56:	6011      	str	r1, [r2, #0]
 8001d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	fa92 f1a2 	rbit	r1, r2
 8001d66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d6a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d6e:	6011      	str	r1, [r2, #0]
  return result;
 8001d70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d74:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	fab2 f282 	clz	r2, r2
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	f002 021f 	and.w	r2, r2, #31
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d084      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x9c8>
 8001d96:	e07f      	b.n	8001e98 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7fe fdfe 	bl	8000998 <HAL_GetTick>
 8001d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	e00b      	b.n	8001dba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7fe fdf9 	bl	8000998 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e2c4      	b.n	8002344 <HAL_RCC_OscConfig+0x106c>
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fa93 f2a3 	rbit	r2, r3
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001de6:	2202      	movs	r2, #2
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	fa93 f2a3 	rbit	r2, r3
 8001df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e00:	601a      	str	r2, [r3, #0]
  return result;
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d102      	bne.n	8001e26 <HAL_RCC_OscConfig+0xb4e>
 8001e20:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	e013      	b.n	8001e4e <HAL_RCC_OscConfig+0xb76>
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e2e:	2202      	movs	r2, #2
 8001e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	fa93 f2a3 	rbit	r2, r3
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e52:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001e56:	2102      	movs	r1, #2
 8001e58:	6011      	str	r1, [r2, #0]
 8001e5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	fa92 f1a2 	rbit	r1, r2
 8001e68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e70:	6011      	str	r1, [r2, #0]
  return result;
 8001e72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e76:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	fab2 f282 	clz	r2, r2
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f002 021f 	and.w	r2, r2, #31
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d184      	bne.n	8001da2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea0:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8242 	beq.w	8002342 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_RCC_OscConfig+0xc58>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	f000 8213 	beq.w	80022f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	f040 8162 	bne.w	80021a2 <HAL_RCC_OscConfig+0xeca>
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ee6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f02:	601a      	str	r2, [r3, #0]
  return result;
 8001f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f08:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2300      	movs	r3, #0
 8001f22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7fe fd38 	bl	8000998 <HAL_GetTick>
 8001f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	e00c      	b.n	8001f48 <HAL_RCC_OscConfig+0xc70>
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe fd30 	bl	8000998 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1fd      	b.n	8002344 <HAL_RCC_OscConfig+0x106c>
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f6c:	601a      	str	r2, [r3, #0]
  return result;
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d102      	bne.n	8001f92 <HAL_RCC_OscConfig+0xcba>
 8001f8c:	4bb0      	ldr	r3, [pc, #704]	; (8002250 <HAL_RCC_OscConfig+0xf78>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	e027      	b.n	8001fe2 <HAL_RCC_OscConfig+0xd0a>
 8001f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f96:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	fa93 f2a3 	rbit	r2, r3
 8001fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fa93 f2a3 	rbit	r2, r3
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	4b9c      	ldr	r3, [pc, #624]	; (8002250 <HAL_RCC_OscConfig+0xf78>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fe6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001fea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fee:	6011      	str	r1, [r2, #0]
 8001ff0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	fa92 f1a2 	rbit	r1, r2
 8001ffe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002002:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002006:	6011      	str	r1, [r2, #0]
  return result;
 8002008:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800200c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	fab2 f282 	clz	r2, r2
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f042 0220 	orr.w	r2, r2, #32
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f002 021f 	and.w	r2, r2, #31
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d182      	bne.n	8001f34 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202e:	4b88      	ldr	r3, [pc, #544]	; (8002250 <HAL_RCC_OscConfig+0xf78>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	430b      	orrs	r3, r1
 8002050:	497f      	ldr	r1, [pc, #508]	; (8002250 <HAL_RCC_OscConfig+0xf78>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800205e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002068:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	fa93 f2a3 	rbit	r2, r3
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800207a:	601a      	str	r2, [r3, #0]
  return result;
 800207c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002080:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002084:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002090:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	461a      	mov	r2, r3
 8002098:	2301      	movs	r3, #1
 800209a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7fe fc7c 	bl	8000998 <HAL_GetTick>
 80020a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a4:	e009      	b.n	80020ba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe fc77 	bl	8000998 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e144      	b.n	8002344 <HAL_RCC_OscConfig+0x106c>
 80020ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020be:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80020c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80020de:	601a      	str	r2, [r3, #0]
  return result;
 80020e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80020e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	095b      	lsrs	r3, r3, #5
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d102      	bne.n	8002104 <HAL_RCC_OscConfig+0xe2c>
 80020fe:	4b54      	ldr	r3, [pc, #336]	; (8002250 <HAL_RCC_OscConfig+0xf78>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	e027      	b.n	8002154 <HAL_RCC_OscConfig+0xe7c>
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800210c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fa93 f2a3 	rbit	r2, r3
 8002146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_RCC_OscConfig+0xf78>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002158:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800215c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002160:	6011      	str	r1, [r2, #0]
 8002162:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002166:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	fa92 f1a2 	rbit	r1, r2
 8002170:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002174:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002178:	6011      	str	r1, [r2, #0]
  return result;
 800217a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800217e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	fab2 f282 	clz	r2, r2
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	f042 0220 	orr.w	r2, r2, #32
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	f002 021f 	and.w	r2, r2, #31
 8002194:	2101      	movs	r1, #1
 8002196:	fa01 f202 	lsl.w	r2, r1, r2
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d082      	beq.n	80020a6 <HAL_RCC_OscConfig+0xdce>
 80021a0:	e0cf      	b.n	8002342 <HAL_RCC_OscConfig+0x106a>
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80021c6:	601a      	str	r2, [r3, #0]
  return result;
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80021d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	461a      	mov	r2, r3
 80021e4:	2300      	movs	r3, #0
 80021e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fbd6 	bl	8000998 <HAL_GetTick>
 80021ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f0:	e009      	b.n	8002206 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f2:	f7fe fbd1 	bl	8000998 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e09e      	b.n	8002344 <HAL_RCC_OscConfig+0x106c>
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800220e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fa93 f2a3 	rbit	r2, r3
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800222a:	601a      	str	r2, [r3, #0]
  return result;
 800222c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002230:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002234:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	095b      	lsrs	r3, r3, #5
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d104      	bne.n	8002254 <HAL_RCC_OscConfig+0xf7c>
 800224a:	4b01      	ldr	r3, [pc, #4]	; (8002250 <HAL_RCC_OscConfig+0xf78>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	e029      	b.n	80022a4 <HAL_RCC_OscConfig+0xfcc>
 8002250:	40021000 	.word	0x40021000
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800225c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fa93 f2a3 	rbit	r2, r3
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002282:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_RCC_OscConfig+0x1078>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80022ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022b0:	6011      	str	r1, [r2, #0]
 80022b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	fa92 f1a2 	rbit	r1, r2
 80022c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80022c8:	6011      	str	r1, [r2, #0]
  return result;
 80022ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f002 021f 	and.w	r2, r2, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d180      	bne.n	80021f2 <HAL_RCC_OscConfig+0xf1a>
 80022f0:	e027      	b.n	8002342 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e01e      	b.n	8002344 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_RCC_OscConfig+0x1078>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800230e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002312:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	429a      	cmp	r2, r3
 8002324:	d10b      	bne.n	800233e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002326:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800232a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800232e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800233a:	429a      	cmp	r2, r3
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000

08002354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b09e      	sub	sp, #120	; 0x78
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e162      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b90      	ldr	r3, [pc, #576]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b8d      	ldr	r3, [pc, #564]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	498b      	ldr	r1, [pc, #556]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b89      	ldr	r3, [pc, #548]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e14a      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b82      	ldr	r3, [pc, #520]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	497f      	ldr	r1, [pc, #508]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80dc 	beq.w	8002580 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d13c      	bne.n	800244a <HAL_RCC_ClockConfig+0xf6>
 80023d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d102      	bne.n	80023fa <HAL_RCC_ClockConfig+0xa6>
 80023f4:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	e00f      	b.n	800241a <HAL_RCC_ClockConfig+0xc6>
 80023fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	667b      	str	r3, [r7, #100]	; 0x64
 8002408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240c:	663b      	str	r3, [r7, #96]	; 0x60
 800240e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800241e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002420:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002422:	fa92 f2a2 	rbit	r2, r2
 8002426:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002428:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800242a:	fab2 f282 	clz	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	f042 0220 	orr.w	r2, r2, #32
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	f002 021f 	and.w	r2, r2, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d17b      	bne.n	800253e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0f3      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d13c      	bne.n	80024cc <HAL_RCC_ClockConfig+0x178>
 8002452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002456:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <HAL_RCC_ClockConfig+0x128>
 8002476:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	e00f      	b.n	800249c <HAL_RCC_ClockConfig+0x148>
 800247c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002480:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	647b      	str	r3, [r7, #68]	; 0x44
 800248a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
 8002490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002498:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80024a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024a4:	fa92 f2a2 	rbit	r2, r2
 80024a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80024aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ac:	fab2 f282 	clz	r2, r2
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	f042 0220 	orr.w	r2, r2, #32
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	f002 021f 	and.w	r2, r2, #31
 80024bc:	2101      	movs	r1, #1
 80024be:	fa01 f202 	lsl.w	r2, r1, r2
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d13a      	bne.n	800253e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0b2      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
 80024cc:	2302      	movs	r3, #2
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x1a0>
 80024ee:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e00d      	b.n	8002510 <HAL_RCC_ClockConfig+0x1bc>
 80024f4:	2302      	movs	r3, #2
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	2302      	movs	r3, #2
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2202      	movs	r2, #2
 8002512:	61ba      	str	r2, [r7, #24]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	fa92 f2a2 	rbit	r2, r2
 800251a:	617a      	str	r2, [r7, #20]
  return result;
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f042 0220 	orr.w	r2, r2, #32
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f002 021f 	and.w	r2, r2, #31
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f202 	lsl.w	r2, r1, r2
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e079      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	491a      	ldr	r1, [pc, #104]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002550:	f7fe fa22 	bl	8000998 <HAL_GetTick>
 8002554:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	e00a      	b.n	800256e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002558:	f7fe fa1e 	bl	8000998 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e061      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 020c 	and.w	r2, r3, #12
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	429a      	cmp	r2, r3
 800257e:	d1eb      	bne.n	8002558 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d214      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 0207 	bic.w	r2, r3, #7
 8002596:	4906      	ldr	r1, [pc, #24]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e040      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
 80025b0:	40022000 	.word	0x40022000
 80025b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCC_ClockConfig+0x2e8>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	491a      	ldr	r1, [pc, #104]	; (800263c <HAL_RCC_ClockConfig+0x2e8>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <HAL_RCC_ClockConfig+0x2e8>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4912      	ldr	r1, [pc, #72]	; (800263c <HAL_RCC_ClockConfig+0x2e8>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025f6:	f000 f829 	bl	800264c <HAL_RCC_GetSysClockFreq>
 80025fa:	4601      	mov	r1, r0
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_RCC_ClockConfig+0x2e8>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002604:	22f0      	movs	r2, #240	; 0xf0
 8002606:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	fa92 f2a2 	rbit	r2, r2
 800260e:	60fa      	str	r2, [r7, #12]
  return result;
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	fab2 f282 	clz	r2, r2
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	40d3      	lsrs	r3, r2
 800261a:	4a09      	ldr	r2, [pc, #36]	; (8002640 <HAL_RCC_ClockConfig+0x2ec>)
 800261c:	5cd3      	ldrb	r3, [r2, r3]
 800261e:	fa21 f303 	lsr.w	r3, r1, r3
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <HAL_RCC_ClockConfig+0x2f0>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_RCC_ClockConfig+0x2f4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe f970 	bl	8000910 <HAL_InitTick>
  
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3778      	adds	r7, #120	; 0x78
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	08002cc0 	.word	0x08002cc0
 8002644:	20000000 	.word	0x20000000
 8002648:	20000004 	.word	0x20000004

0800264c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	b08b      	sub	sp, #44	; 0x2c
 8002650:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002666:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b04      	cmp	r3, #4
 8002674:	d002      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0x30>
 8002676:	2b08      	cmp	r3, #8
 8002678:	d003      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x36>
 800267a:	e03c      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800267c:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_GetSysClockFreq+0xc4>)
 800267e:	623b      	str	r3, [r7, #32]
      break;
 8002680:	e03c      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002688:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800268c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	fa92 f2a2 	rbit	r2, r2
 8002694:	607a      	str	r2, [r7, #4]
  return result;
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	fab2 f282 	clz	r2, r2
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	40d3      	lsrs	r3, r2
 80026a0:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026a6:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_RCC_GetSysClockFreq+0xc0>)
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	220f      	movs	r2, #15
 80026b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	fa92 f2a2 	rbit	r2, r2
 80026b8:	60fa      	str	r2, [r7, #12]
  return result;
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	fab2 f282 	clz	r2, r2
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	40d3      	lsrs	r3, r2
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <HAL_RCC_GetSysClockFreq+0xcc>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026d4:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	e004      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	4a0c      	ldr	r2, [pc, #48]	; (800271c <HAL_RCC_GetSysClockFreq+0xd0>)
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	623b      	str	r3, [r7, #32]
      break;
 80026f4:	e002      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026f8:	623b      	str	r3, [r7, #32]
      break;
 80026fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fc:	6a3b      	ldr	r3, [r7, #32]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	372c      	adds	r7, #44	; 0x2c
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	007a1200 	.word	0x007a1200
 8002714:	08002cd0 	.word	0x08002cd0
 8002718:	08002ce0 	.word	0x08002ce0
 800271c:	003d0900 	.word	0x003d0900

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b092      	sub	sp, #72	; 0x48
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80d4 	beq.w	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002744:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10e      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	4a4a      	ldr	r2, [pc, #296]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275a:	61d3      	str	r3, [r2, #28]
 800275c:	4b48      	ldr	r3, [pc, #288]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b45      	ldr	r3, [pc, #276]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a41      	ldr	r2, [pc, #260]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7fe f907 	bl	8000998 <HAL_GetTick>
 800278a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	e008      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278e:	f7fe f903 	bl	8000998 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b64      	cmp	r3, #100	; 0x64
 800279a:	d901      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e169      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	4b38      	ldr	r3, [pc, #224]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8084 	beq.w	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d07c      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	461a      	mov	r2, r3
 80027f6:	2301      	movs	r3, #1
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	461a      	mov	r2, r3
 800281a:	2300      	movs	r3, #0
 800281c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800281e:	4a18      	ldr	r2, [pc, #96]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002822:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d04b      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fe f8b3 	bl	8000998 <HAL_GetTick>
 8002832:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe f8af 	bl	8000998 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e113      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800284c:	2302      	movs	r3, #2
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
 8002858:	2302      	movs	r3, #2
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	61fb      	str	r3, [r7, #28]
  return result;
 8002864:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d108      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800287a:	4b01      	ldr	r3, [pc, #4]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	e00d      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	10908100 	.word	0x10908100
 800288c:	2302      	movs	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	4b78      	ldr	r3, [pc, #480]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2202      	movs	r2, #2
 800289e:	613a      	str	r2, [r7, #16]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	fa92 f2a2 	rbit	r2, r2
 80028a6:	60fa      	str	r2, [r7, #12]
  return result;
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	fab2 f282 	clz	r2, r2
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f002 021f 	and.w	r2, r2, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0b7      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028c6:	4b6d      	ldr	r3, [pc, #436]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	496a      	ldr	r1, [pc, #424]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b66      	ldr	r3, [pc, #408]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	4a65      	ldr	r2, [pc, #404]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028f8:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f023 0203 	bic.w	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	495d      	ldr	r1, [pc, #372]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002906:	4313      	orrs	r3, r2
 8002908:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002916:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4956      	ldr	r1, [pc, #344]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002924:	4313      	orrs	r3, r2
 8002926:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002934:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	494e      	ldr	r1, [pc, #312]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002942:	4313      	orrs	r3, r2
 8002944:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f023 0210 	bic.w	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	4947      	ldr	r1, [pc, #284]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002960:	4313      	orrs	r3, r2
 8002962:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002970:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	493f      	ldr	r1, [pc, #252]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f023 0220 	bic.w	r2, r3, #32
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4938      	ldr	r1, [pc, #224]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800299c:	4313      	orrs	r3, r2
 800299e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029ac:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	4930      	ldr	r1, [pc, #192]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029ca:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	4929      	ldr	r1, [pc, #164]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	4921      	ldr	r1, [pc, #132]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	491a      	ldr	r1, [pc, #104]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	4912      	ldr	r1, [pc, #72]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	490b      	ldr	r1, [pc, #44]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6c:	4903      	ldr	r1, [pc, #12]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3748      	adds	r7, #72	; 0x48
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000

08002a80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e09d      	b.n	8002bce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa2:	d009      	beq.n	8002ab8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
 8002aaa:	e005      	b.n	8002ab8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fd fe1a 	bl	800070c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002af8:	d902      	bls.n	8002b00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	e002      	b.n	8002b06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b0e:	d007      	beq.n	8002b20 <HAL_SPI_Init+0xa0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b18:	d002      	beq.n	8002b20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	ea42 0103 	orr.w	r1, r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	0c1b      	lsrs	r3, r3, #16
 8002b7c:	f003 0204 	and.w	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002bde:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002be2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	f107 0014 	add.w	r0, r7, #20
 8002c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	b004      	add	sp, #16
 8002c4c:	4770      	bx	lr

08002c4e <memset>:
 8002c4e:	4402      	add	r2, r0
 8002c50:	4603      	mov	r3, r0
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d100      	bne.n	8002c58 <memset+0xa>
 8002c56:	4770      	bx	lr
 8002c58:	f803 1b01 	strb.w	r1, [r3], #1
 8002c5c:	e7f9      	b.n	8002c52 <memset+0x4>
	...

08002c60 <__libc_init_array>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	4d0d      	ldr	r5, [pc, #52]	; (8002c98 <__libc_init_array+0x38>)
 8002c64:	4c0d      	ldr	r4, [pc, #52]	; (8002c9c <__libc_init_array+0x3c>)
 8002c66:	1b64      	subs	r4, r4, r5
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	2600      	movs	r6, #0
 8002c6c:	42a6      	cmp	r6, r4
 8002c6e:	d109      	bne.n	8002c84 <__libc_init_array+0x24>
 8002c70:	4d0b      	ldr	r5, [pc, #44]	; (8002ca0 <__libc_init_array+0x40>)
 8002c72:	4c0c      	ldr	r4, [pc, #48]	; (8002ca4 <__libc_init_array+0x44>)
 8002c74:	f000 f818 	bl	8002ca8 <_init>
 8002c78:	1b64      	subs	r4, r4, r5
 8002c7a:	10a4      	asrs	r4, r4, #2
 8002c7c:	2600      	movs	r6, #0
 8002c7e:	42a6      	cmp	r6, r4
 8002c80:	d105      	bne.n	8002c8e <__libc_init_array+0x2e>
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c88:	4798      	blx	r3
 8002c8a:	3601      	adds	r6, #1
 8002c8c:	e7ee      	b.n	8002c6c <__libc_init_array+0xc>
 8002c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c92:	4798      	blx	r3
 8002c94:	3601      	adds	r6, #1
 8002c96:	e7f2      	b.n	8002c7e <__libc_init_array+0x1e>
 8002c98:	08002cf0 	.word	0x08002cf0
 8002c9c:	08002cf0 	.word	0x08002cf0
 8002ca0:	08002cf0 	.word	0x08002cf0
 8002ca4:	08002cf4 	.word	0x08002cf4

08002ca8 <_init>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	bf00      	nop
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr

08002cb4 <_fini>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	bf00      	nop
 8002cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cba:	bc08      	pop	{r3}
 8002cbc:	469e      	mov	lr, r3
 8002cbe:	4770      	bx	lr
